class GossipsController < ApplicationController
  def index
    @gossips = Gossip.all
    # M√©thode qui r√©cup√®re tous les potins et les envoie √† la view index (index.html.erb) pour affichage
  end

  def show
    # M√©thode qui r√©cup√®re le potin concern√© et l'envoie √† la view show (show.html.erb) pour affichage
  end

  def new
    @gossips = Gossip.new
    # M√©thode qui cr√©e un potin vide et l'envoie √† une view qui affiche le formulaire pour 'le remplir' (new.html.erb)
  end

  def create
    @gossip = Gossip.new(title: params[:title], content: params[:content])
    # M√©thode qui cr√©√© un potin √† partir du contenu du formulaire de new.html.erb, soumis par l'utilisateur
    if @gossip.save
    #banner_alert[:success] = "Trop cool!üëå ‚úÖ Ton Gossip a √©t√© publi√© ‚úÖüëå" ()
    #redirect_to :controller => 'static_pages', :action => 'index' (bas√© sur mod√®le trouv√© sur stackoverflow : redirect_to :controller => 'controllername', :action => 'actionname')
    else
    #banner_alert[:failure] = "‚ùå Tu n'as pas rempli le formulaire correctement... ‚ùå üëâ Essaie encore"
    #render :action => 'new'
    end

  def edit
    # M√©thode qui r√©cup√®re le potin concern√© et l'envoie √† la view edit (edit.html.erb) pour affichage dans un formulaire d'√©dition
  end

  def update
    # M√©thode qui met √† jour le potin √† partir du contenu du formulaire de edit.html.erb, soumis par l'utilisateur
    # pour info, le contenu de ce formulaire sera accessible dans le hash params
    # Une fois la modification faite, on redirige g√©n√©ralement vers la m√©thode show (pour afficher le potin modifi√©)
  end

  def destroy
    # M√©thode qui r√©cup√®re le potin concern√© et le d√©truit en base
    # Une fois la suppression faite, on redirige g√©n√©ralement vers la m√©thode index (pour afficher la liste √† jour)
  end
end
